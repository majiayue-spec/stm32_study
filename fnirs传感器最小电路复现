#stm32开发环境
MDK5:标准库、HAL库。编译器比较原始的
STM32CubeMX+MDK5的开发方式
STM32CubeIDE：芯片以及自己的编译器

但MDK5支持所有ARM芯片，STM32CubeIDE只支持ST家的芯片

由于时间紧迫，虽然ide有局限性，但容易上手所以我还是先用ide了
首先用ai解决了keil工程导入ide时候出现的一些报错。
5/30把师兄给的NIRS工程导入，因为师兄用的keil+mx开发方式，所以我在导入ide的时候报错比较多。
主要是max86141.h文件的路径不太对以及max86141.c没有被编译。
把报错信息发给kimi之后问了几轮，解决了。0error.

下一步就是等师兄把两个小板子（一个stm32小系统板还有一个nirs传感器的板子）的原理图发给我之后，我要研究一下硬件组成。
然后看看这个stm32工程是不是能驱动的。
就是我看stm32板子上的烧录接口好像还需要焊一下。
然后我想在工程里面加一个oled的程序，可以让fnirs的输出数据实时显示在oled屏上。
但是这个oled的我看是四引脚传输。不知道协议是不是使用。


配置寄存器等等原理我其实还是不会。主要是硬件方面有了一些了解，基本外设了解了。其他还是靠ai搞的。

报错解决了之后，现在就是怎样进行物理实现
传感器已经连上了
现在的问题是：烧录还是调试？如何把程序烧录进stm32里？如何修改程序来接受串口得到的传感数据。
烧录用什么线连接？串口与电脑通信用什么线连接？


因为烧录端子有一个焊盘掉了，所以硬件暂时不能用。先准备一下之后要用的东西。修复的话没关系，到时候修复好了连一下swd接口通讯一下，录个视频。

烧录段子四个焊盘都被我拽掉了。只好找人飞线了。也是终于修好。

本以为硬件就完事了。结果stlink插上之后板载led确实亮了，但是电脑识别不到stlink所在的端口。就是stlink驱动也装了，ch340串口驱动也装了，设备管理器里面
通用串行总线设备那一栏能搜索到stlink的，但为什么串口COM就搜索不到呢，啊啊啊。\

不过今天至少把串口调试的修改版程序跑通了喽。

<师兄，我学习您给的资料学到串口，然后我就想能不能用你的板子，把传感器收集到的数据发给串口调试器读一下，所以我改了一点代码，编译没有报错应该能用；然后板子上留的烧录端子那里我本来想焊个接口，但是不小心把焊盘拔掉了，不过现在线引出来还可以用。
但是今天有一个奇怪的事情就是我的stlink之前是可以正常烧录程序的，但是过了一个端午假期之后事情变得有点不一样，今天电脑识别不到串口。虽然设备管理器里面通用串行总线设备有识别到stLink，但是端口部分搜索不到。我换了自己的板子还是搜索不到，换了别的usb可以搜索到，检查了ch340驱动和stlink驱动都安装了，我不知道会不会是stlink出了什么问题呢
然后因为最近快要期末考试了，我想能不能考完试向您汇报，然后看看是怎么回事>


#
硬件连接
1、ST-Link 烧录器连接：
将 ST-Link 的 SWDIO、SWCLK、GND 和 VCC 引脚连接到 STM32 最小系统板的对应引脚。
如果使用 ST-Link V2 或 V3，通常会有一个标准的 20 引脚接口，可以直接连接到开发板的调试接口。
2、串口连接：
将 ST-Link 的 USB 接口连接到电脑。
确保 ST-Link 的驱动已正确安装，电脑会识别出一个虚拟串口设备（例如 COM3 或 COM4）。

软件配置
1、STM32CubeIDE 配置：
打开 STM32CubeIDE，确保你的项目已经正确配置了 SPI 和 USART。
确保项目中已经包含了 MAX86141 的驱动代码。
2、代码实现：
以下是完整的 main.c 文件代码，包含初始化、数据采集和串口发送的逻辑：
/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "dma.h"
#include "spi.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "MAX86141.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define BUFFER_SIZE 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN PV */
uint8_t buffer[BUFFER_SIZE];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t CountSum(uint8_t *Data, uint8_t Len){
    uint8_t sum = 0;
    for(uint8_t i = 0; i<Len;i++){
        sum+=Data[i];
    }
    return sum;
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
    /* USER CODE BEGIN 1 */
    uint8_t i = 0;
    uint8_t DataLen = A_FULL * 2;
    uint8_t BufLen = DataLen + 5;
    uint8_t LEDBuf[30] = {0};
    uint8_t count[NIRS_NUM];
    memset(count, 11, NIRS_NUM);

    uint8_t spo2 = 0; // 假设的血氧值变量
    uint8_t heart_rate = 0; // 假设的心率值变量
    char uart_buffer[20]; // 用于存储串口发送的字符串
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();

    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();

    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
    MX_DMA_Init();
    MX_USART1_UART_Init();
    MX_TIM2_Init();
    MX_SPI1_Init();
    /* USER CODE BEGIN 2 */
    for(i = NIRS_STA; i < NIRS_NUM; i++){
        MAX86141_INIT(i + 1);
        HAL_Delay(10);
    }

    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        // 假设从传感器获取数据
        spo2 = MAX86141_GetSPO2(); // 假设的函数，获取血氧值
        heart_rate = MAX86141_GetHeartRate(); // 假设的函数，获取心率值

        // 将数据格式化为字符串
        sprintf(uart_buffer, "SPO2: %d%%, HR: %d bpm\r\n", spo2, heart_rate);

        // 通过串口发送数据
        HAL_UART_Transmit(&huart1, (uint8_t*)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);

        // 延时一段时间，例如1秒
        HAL_Delay(1000);
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
    {
        Error_Handler();
    }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
    {
    }
    /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */


实践步骤
1、硬件连接：
将 ST-Link 的 SWDIO、SWCLK、GND 和 VCC 引脚连接到 STM32 最小系统板。
将 ST-Link 的 USB 接口连接到电脑。
2、编译和烧录程序：
打开 STM32CubeIDE，加载你的项目。
确保代码中已经正确配置了 SPI 和 USART。
点击 “Build Project” 编译项目。
选择 “Debug As” > “STM32 MCU Debugging”。
在 “Debug Configurations” 窗口中，确保选择了 ST-Link 和正确的目标芯片。
点击 “Debug” 按钮，程序将通过 ST-Link 烧录到 STM32 芯片中。
3、串口调试：
打开串口调试助手（如 PuTTY、SecureCRT 或其他串口助手）。
选择对应的虚拟串口（例如 COM3 或 COM4）。
设置与 STM32 程序中一致的波特率（例如 115200）。
打开串口连接，STM32 发送的数据将显示在串口调试助手上。

注意事项
1、确保驱动安装：
如果电脑未识别 ST-Link 或虚拟串口，可能需要手动安装驱动程序。可以从 ST 官方网站下载最新的驱动程序。
2、检查连接：
确保 ST-Link 和 STM32 的连接正确，尤其是 SWDIO 和 SWCLK 引脚。
3、调试模式：
在调试模式下，STM32 的调试引脚会被占用，无法用于其他功能。如果需要同时使用这些引脚作为普通 GPIO 或其他功能，需要退出调试模式。
4、实现传感器数据读取：
代码中 MAX86141_GetSPO2() 和 MAX86141_GetHeartRate() 是假设的函数，你需要根据你的 MAX86141 驱动代码实现这些函数。









